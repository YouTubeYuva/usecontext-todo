/* // import React, { createContext, useReducer, useContext, useMemo, useCallback } from 'react';
// import _ from 'lodash';
// import './td.css';

// interface Data {
//   id: number;
//   value: string;
//   completed: boolean;
// }

// type Todo = "all" | "active" | "completed";

// // State interface
// interface State {
//   data: Data[];
//   filter: Todo;
//   inputValue: string;
// }

// // Action types
// type Action =
//   | { type: 'ADD_TODO'; payload: string }
//   | { type: 'TOGGLE_TODO'; payload: number }
//   | { type: 'REMOVE_TODO'; payload: number }
//   | { type: 'SET_FILTER'; payload: Todo }
//   | { type: 'SET_INPUT'; payload: string }
//   | { type: 'TOGGLE_ALL'; payload: boolean }
//   | { type: 'CLEAR_COMPLETED' };

// // Initial state
// const initialState: State = {
//   data: [],
//   filter: "all",
//   inputValue: "",
// };

// // Reducer function
// function todoReducer(state: State, action: Action): State {
//   switch (action.type) {
//     case 'ADD_TODO':
//       return {
//         ...state,
//         data: [
//           ...state.data,
//           { id: Math.random(), value: action.payload.trim(), completed: false },
//         ],
//         inputValue: '',
//       };
//     case 'TOGGLE_TODO':
//       return {
//         ...state,
//         data: state.data.map(item =>
//           item.id === action.payload
//             ? { ...item, completed: !item.completed }
//             : item
//         ),
//       };
//     case 'REMOVE_TODO':
//       return {
//         ...state,
//         data: state.data.filter(item => item.id !== action.payload),
//       };
//     case 'SET_FILTER':
//       return {
//         ...state,
//         filter: action.payload,
//       };
//     case 'SET_INPUT':
//       return {
//         ...state,
//         inputValue: action.payload,
//       };
//     case 'TOGGLE_ALL':
//       return {
//         ...state,
//         data: state.data.map(item => ({ ...item, completed: action.payload })),
//       };
//     case 'CLEAR_COMPLETED':
//       return {
//         ...state,
//         data: state.data.filter(item => !item.completed),
//       };
//     default:
//       return state;
//   }
// }

// // Create context
// const TodoContext = createContext<{
//   state: State;
//   dispatch: React.Dispatch<Action>;
// }>({
//   state: initialState,
//   dispatch: () => {},
// });

// // Custom hook to use context
// function useTodo() {
//   return useContext(TodoContext);
// }

// // Component
// export default function TodoApp() {
//   const { state, dispatch } = useTodo();
//   const { data, filter, inputValue } = state;

//   const handleKeyPress = useCallback(
//     (event: React.KeyboardEvent<HTMLInputElement>) => {
//       if (event.key === 'Enter' && inputValue.trim()) {
//         event.preventDefault();
//         dispatch({ type: 'ADD_TODO', payload: inputValue });
//       }
//     },
//     [inputValue, dispatch]
//   );

//   const handleCheckbox = useCallback(
//     (id: number) => {
//       dispatch({ type: 'TOGGLE_TODO', payload: id });
//     },
//     [dispatch]
//   );

//   const handleRemove = useCallback(
//     (id: number) => {
//       dispatch({ type: 'REMOVE_TODO', payload: id });
//     },
//     [dispatch]
//   );

//   const handleSelectAll = useCallback(
//     (event: React.ChangeEvent<HTMLInputElement>) => {
//       dispatch({ type: 'TOGGLE_ALL', payload: event.target.checked });
//     },
//     [dispatch]
//   );

//   const handleClick = useCallback(
//     (item: Todo) => {
//       dispatch({ type: 'SET_FILTER', payload: item });
//     },
//     [dispatch]
//   );

//   const filteredData = useMemo(() => {
//     if (filter === 'active') {
//       return data.filter(item => !item.completed);
//     } else if (filter === 'completed') {
//       return data.filter(item => item.completed);
//     }
//     return data;
//   }, [data, filter]);

//   const handleClearCompleted = useCallback(() => {
//     dispatch({ type: 'CLEAR_COMPLETED' });
//   }, [dispatch]);

//   return (
//     <div className="header">
//       <h1>todos</h1>
//       <div className="div_input">
//         <div>
//           <input
//             type="check"
//             onChange={handleSelectAll}
//             checked={data.length > 0 && data.every(item => item.completed)}
//           />
//         </div>
//         <div>
//           <input
//             type="text"
//             value={inputValue}
//             onKeyDown={handleKeyPress}
//             onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
//               dispatch({ type: 'SET_INPUT', payload: event.target.value })
//             }
//             placeholder="What needs to be done?"
//           />
//         </div>
//       </div>
//       <div>
//         {filteredData.map((item) => (
//           <div key={item.id} className="todo-item">
//             <input
//               type="checkbox"
//               checked={item.completed}
//               onChange={() => handleCheckbox(item.id)}
//             />
//             <span>{item.value}</span>
//             <button className="todo-remove" onClick={() => handleRemove(item.id)}>
//               x
//             </button>
//           </div>
//         ))}
//         {data.length > 0 && (
//           <div className="footer">
//             <span className="todo-count">
//               {data.filter((item) => !item.completed).length} items left!
//             </span>
//             <button className="todo-all" onClick={() => handleClick('all')}>
//               All
//             </button>
//             <button className="todo-active" onClick={() => handleClick('active')}>
//               Active
//             </button>
//             <button className="todo-completed" onClick={() => handleClick('completed')}>
//               Completed
//             </button>
//             <button className="todo-clear-completed" onClick={handleClearCompleted}>
//               Clear Completed
//             </button>
//           </div>
//         )}
//       </div>
//     </div>
//   );
// } */

/* // import React, { createContext, useContext, useReducer, useState, useCallback } from "react";
// import _ from "lodash";
// import "./td.css";

// interface Data {
//   id: number;
//   value: string;
//   completed: boolean;
// }

// type Todo = "all" | "active" | "completed";

// type Action =
//   | { type: "ADD_TODO"; payload: string }
//   | { type: "TOGGLE_TODO"; payload: number }
//   | { type: "REMOVE_TODO"; payload: number }
//   | { type: "SET_COMPLETED"; payload: boolean }
//   | { type: "CLEAR_COMPLETED" };

// interface TodoContextType {
//   data: Data[];
//   addTodo: (value: string) => void;
//   toggleTodo: (id: number) => void;
//   removeTodo: (id: number) => void;
//   setCompleted: (completed: boolean) => void;
//   clearCompleted: () => void;
//   filter: Todo;
//   setFilter: (option: Todo) => void;
// }

// const initialState: Data[] = [];

// const TodoReducer = (state: Data[], action: Action): Data[] => {
//   switch (action.type) {
//     case "ADD_TODO":
//       return [
//         ...state,
//         {
//           id: Math.random(),
//           value: action.payload,
//           completed: false,
//         },
//       ];
//     case "TOGGLE_TODO":
//       return _.map(state, (item) =>
//         item.id === action.payload
//           ? { ...item, completed: !item.completed }
//           : item
//       );
//     case "REMOVE_TODO":
//       return _.filter(state, (item) => item.id !== action.payload);
//     case "SET_COMPLETED":
//       return _.map(state, (item) => ({ ...item, completed: action.payload }));
//     case "CLEAR_COMPLETED":
//       return _.filter(state, (item) => !item.completed);
//     default:
//       return state;
//   }
// };

// const TodoContext = createContext<TodoContextType | undefined>(undefined);

// export const TodoProvider = ({ children }: { children: React.ReactNode }) => {
//   const [data, dispatch] = useReducer(TodoReducer, initialState);
//   const [filter, setFilter] = useState<Todo>("all");

//   const addTodo = (value: string) => {
//     if (value.trim()) {
//       dispatch({ type: "ADD_TODO", payload: value.trim() });
//     }
//   };

//   const toggleTodo = (id: number) => {
//     dispatch({ type: "TOGGLE_TODO", payload: id });
//   };

//   const removeTodo = (id: number) => {
//     dispatch({ type: "REMOVE_TODO", payload: id });
//   };

//   const setCompleted = (completed: boolean) => {
//     dispatch({ type: "SET_COMPLETED", payload: completed });
//   };

//   const clearCompleted = () => {
//     dispatch({ type: "CLEAR_COMPLETED" });
//   };

//   const value = {
//     data,
//     addTodo,
//     toggleTodo,
//     removeTodo,
//     setCompleted,
//     clearCompleted,
//     filter,
//     setFilter,
//   };

//   return <TodoContext.Provider value={value}>{children}</TodoContext.Provider>;
// };

// export const useTodoContext = (): TodoContextType => {
//   const context = useContext(TodoContext);
//   if (!context) {
//     throw new Error("useTodoContext must be used within a TodoProvider");
//   }
//   return context;
// };

// export const TodoApp = () => {
//   const {
//     data,
//     addTodo,
//     toggleTodo,
//     removeTodo,
//     setCompleted,
//     clearCompleted,
//   } = useTodoContext();

//   const [value, setValue] = useState<string>("");
//   const [filter, setFilter] = React.useState<Todo>("all");


//   const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
//     if (event.key === "Enter") {
//       event.preventDefault();
//       addTodo(value);
//       setValue("");
//     }
//   };

//   const filteredData = (() => {
//     if (filter === "active") {
//       return _.filter(data, (item) => !item.completed);
//     } else if (filter === "completed") {
//       return _.filter(data, (item) => item.completed);
//     } else {
//       return data;
//     }
//   })();

//   const handleFilterChange = (option: Todo) => {
//     setFilter(option);
//   };

//   return (
//     <div className="header">
//       <h1>todos</h1>
//       <div className="div_input">
//         <div>
//           <input
//             className="check"
//             type="checkbox"
//             onChange={(e) => setCompleted(e.target.checked)}
//             checked={data.length > 0 && _.every(data, (item) => item.completed)}
//           />
//         </div>
//         <div>
//           <input
//             type="text"
//             value={value}
//             onKeyDown={handleKeyPress}
//             onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
//               setValue(event.target.value)
//             }
//             placeholder="What needs to be done?"
//           />
//         </div>
//       </div>
//       <div>
//         {_.map(filteredData, (item) => (
//           <div key={item.id} className="todo-item">
//             <input
//               type="checkbox"
//               checked={item.completed}
//               onChange={() => toggleTodo(item.id)}
//             />
//             <span>{item.value}</span>
//             <button className="todo-remove" onClick={() => removeTodo(item.id)}>
//               x
//             </button>
//           </div>
//         ))}
//       </div>
//       {data.length > 0 && (
//         <div className="footer">
//           <span className="todo-count">
//             {_.filter(data, (item) => !item.completed).length} items left!
//           </span>
//           <button className="todo-all" onClick={() => handleFilterChange("all")}>
//             All
//           </button>
//           <button className="todo-active" onClick={() => handleFilterChange("active")}>
//             Active
//           </button>
//           <button
//             className="todo-completed"
//             onClick={() => handleFilterChange("completed")}
//           >
//             Completed
//           </button>
//           <button className="todo-clear-completed" onClick={clearCompleted}>
//             Clear Completed
//           </button>
//         </div>
//       )}
//     </div>
//   );
// }; */

/* 
// import React, { useReducer, useContext, createContext, ReactNode } from "react";
// import _ from "lodash";
// import "./td.css";

// export interface Data {
//   id: number;
//   value: string;
//   completed: boolean;
// }

// type Todo = "all" | "active" | "completed";

// interface State {
//   value: string;
//   data: Data[];
//   filter: Todo;
// }

// type Action =
//   | { type: "SET_VALUE"; payload: string }
//   | { type: "ADD_TODO"; payload: string }
//   | { type: "TOGGLE_TODO"; payload: number }
//   | { type: "REMOVE_TODO"; payload: number }
//   | { type: "SET_FILTER"; payload: Todo }
//   | { type: "SELECT_ALL"; payload: boolean }
//   | { type: "CLEAR_COMPLETED" };

// const initialState: State = {
//   value: "",
//   data: [],
//   filter: "all",
// };

// function reducer(state: State, action: Action): State {
//   switch (action.type) {
//     case "SET_VALUE":
//       return { ...state, value: action.payload };

//     case "ADD_TODO":
//       return {
//         ...state,
//         data: [
//           ...state.data,
//           {
//             id: Math.random(),
//             value: action.payload.trim(),
//             completed: false,
//           },
//         ],
//         value: "",
//       };

//     case "TOGGLE_TODO":
//       return {
//         ...state,
//         data: _.map(state.data, (item) =>
//           item.id === action.payload
//             ? { ...item, completed: !item.completed }
//             : item
//         ),
//       };

//     case "REMOVE_TODO":
//       return {
//         ...state,
//         data: _.filter(state.data, (item) => item.id !== action.payload),
//       };

//     case "SET_FILTER":
//       return { ...state, filter: action.payload };

//     case "SELECT_ALL":
//       return {
//         ...state,
//         data: _.map(state.data, (item) => ({
//           ...item,
//           completed: action.payload,
//         })),
//       };

//     case "CLEAR_COMPLETED":
//       return {
//         ...state,
//         data: _.filter(state.data, (item) => !item.completed),
//       };

//     default:
//       return state;
//   }
// }

// interface TodoContextProps {
//   state: State;
//   dispatch: React.Dispatch<Action>;
// }

// const TodoContext = createContext<TodoContextProps | undefined>(undefined);

// export const useTodo = () => {
//   const context = useContext(TodoContext);
//   if (!context) {
//     throw new Error("useTodo must be used within a TodoProvider");
//   }
//   return context;
// };

// interface ChildrenProps {
//   children: ReactNode;
// }

// export const TodoProvider = ({ children }: ChildrenProps) => {
//   const [state, dispatch] = useReducer(reducer, initialState);

//   return (
//     <TodoContext.Provider value={{ state, dispatch }}>
//       {children}
//     </TodoContext.Provider>
//   );
// };

// export const TodoApp = () => {
//   const { state, dispatch } = useTodo();

//   const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
//     dispatch({ type: "SET_VALUE", payload: event.target.value });
//   };

//   const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {
//     if (event.key === "Enter" && state.value.trim()) {
//       event.preventDefault();
//       dispatch({ type: "ADD_TODO", payload: state.value });
//     }
//   };

//   const handleCheckbox = (id: number) => {
//     dispatch({ type: "TOGGLE_TODO", payload: id });
//   };

//   const handleRemove = (id: number) => {
//     dispatch({ type: "REMOVE_TODO", payload: id });
//   };

//   const handleClick = (option: Todo) => {
//     dispatch({ type: "SET_FILTER", payload: option });
//   };

//   const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {
//     dispatch({ type: "SELECT_ALL", payload: event.target.checked });
//   };

//   const filteredData = (() => {
//     if (state.filter === "active") {
//       return _.filter(state.data, (item) => !item.completed);
//     } else if (state.filter === "completed") {
//       return _.filter(state.data, (item) => item.completed);
//     } else {
//       return state.data;
//     }
//   })();

//   const handleClearCompleted = () => {
//     dispatch({ type: "CLEAR_COMPLETED" });
//   };

//   const allCompleted =
//     state.data.length > 0 && _.every(state.data, (item) => item.completed);

//   return (
//     <div className="header">
//       <h1>todos</h1>
//       <div className="div_input">
//         <div>
//           <input
//             className="check"
//             type="checkbox"
//             onChange={handleSelectAll}
//             checked={allCompleted}
//           />
//         </div>
//         <div>
//           <input
//             type="text"
//             value={state.value}
//             onKeyDown={handleKeyPress}
//             onChange={handleChange}
//             placeholder="What needs to be done?"
//           />
//         </div>
//       </div>
//       <div>
//         {_.map(filteredData, (item) => (
//           <div key={item.id} className="todo-item">
//             <input
//               type="checkbox"
//               checked={item.completed}
//               onChange={() => handleCheckbox(item.id)}
//             />
//             <span>{item.value}</span>
//             <button
//               className="todo-remove"
//               onClick={() => handleRemove(item.id)}
//             >
//               x
//             </button>
//           </div>
//         ))}
//       </div>
//       {state.data.length > 0 && (
//         <div className="footer">
//           <span className="todo-count">
//             {_.filter(state.data, (item) => !item.completed).length} items left!
//           </span>
//           <button className="todo-all" onClick={() => handleClick("all")}>
//             All
//           </button>
//           <button className="todo-active" onClick={() => handleClick("active")}>
//             Active
//           </button>
//           <button
//             className="todo-completed"
//             onClick={() => handleClick("completed")}
//           >
//             Completed
//           </button>
//           <button
//             className="todo-clear-completed"
//             onClick={handleClearCompleted}
//           >
//             Clear Completed
//           </button>
//         </div>
//       )}
//     </div>
//   );
// }; */
